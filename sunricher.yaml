blueprint:
  name: Sunricher Dial Controller (ZHA) – Full Input Support
  description: |
    Handles full input set from Sunricher dial (HK-ZRC-K5&RS-TL) via ZHA.
    Supports:
    - Single/double/long press for all 5 buttons (1–4 + centre)
    - Dial rotation: clockwise and counter-clockwise

    Requires two helpers:
    - input_datetime.scene_control_last_press
    - input_datetime.scene_control_hold_start

  domain: automation

  input:
    remote:
      name: Sunricher remote
      description: The remote device to use for the automation
      selector:
        device:
          entity:
            - integration: zha
          filter:
            - integration: zha
              manufacturer: Sunricher
              model: HK-ZRC-K5&RS-TL
          multiple: false

    # Button actions
    button_1_single: { name: Button 1 – Single, default: [], selector: { action: {} } }
    button_1_double: { name: Button 1 – Double, default: [], selector: { action: {} } }
    button_1_long:   { name: Button 1 – Long,   default: [], selector: { action: {} } }

    button_2_single: { name: Button 2 – Single, default: [], selector: { action: {} } }
    button_2_double: { name: Button 2 – Double, default: [], selector: { action: {} } }
    button_2_long:   { name: Button 2 – Long,   default: [], selector: { action: {} } }

    button_3_single: { name: Button 3 – Single, default: [], selector: { action: {} } }
    button_3_double: { name: Button 3 – Double, default: [], selector: { action: {} } }
    button_3_long:   { name: Button 3 – Long,   default: [], selector: { action: {} } }

    button_4_single: { name: Button 4 – Single, default: [], selector: { action: {} } }
    button_4_double: { name: Button 4 – Double, default: [], selector: { action: {} } }
    button_4_long:   { name: Button 4 – Long,   default: [], selector: { action: {} } }

    centre_single:   { name: Centre – Single, default: [], selector: { action: {} } }
    centre_double:   { name: Centre – Double, default: [], selector: { action: {} } }
    centre_long:     { name: Centre – Long,   default: [], selector: { action: {} } }

    # Dial actions
    dial_clockwise_action:
      name: Dial – Clockwise
      default: []
      selector: { action: {} }

    dial_counter_action:
      name: Dial – Counter-clockwise
      default: []
      selector: { action: {} }

trigger:
  - platform: event
    event_type: zha_event

variables:
  # Timing thresholds
  double_press_window: 0.5
  long_press_threshold: 0.7

  # Track values
  trigger_data: "{{ trigger.event.data }}"
  now_ts: "{{ now().timestamp() }}"
  last_press_ts: >
    {{ (states('input_datetime.scene_control_last_press') | as_datetime).timestamp()
       if states('input_datetime.scene_control_last_press') not in ['unknown', 'unavailable'] else 0 }}
  time_since_last_press: "{{ now_ts - last_press_ts }}"

  # Button map (scene_id)
  button_map:
    "0": "button_1"
    "1": "button_2"
    "2": "button_3"
    "3": "button_4"
    "centre": "centre"

condition:
  - condition: template
    value_template: "{{ trigger.event.data.device_id == device_attr(input.remote, 'id') }}"

action:
  - choose:
      # =============== BUTTON PRESSES (1–4 + Centre) ===============
      - conditions:
          - condition: template
            value_template: >
              {{
                (trigger_data.cluster_id == 5 and trigger_data.command == 'recall') or
                (trigger_data.cluster_id == 6 and trigger_data.command in ['on', 'off'])
              }}
        sequence:
          - variables:
              button_key: >
                {% if trigger_data.cluster_id == 5 %}
                  {{ button_map[trigger_data.params.scene_id | string] }}
                {% else %}
                  {{ button_map["centre"] }}
                {% endif %}

          # Store press start
          - service: input_datetime.set_datetime
            data:
              entity_id: input_datetime.scene_control_hold_start
              timestamp: "{{ now().timestamp() }}"

          # Delay for long press detection
          - delay:
              milliseconds: 800

          # Classify as long, double, or single
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ now().timestamp() - (states('input_datetime.scene_control_hold_start') | as_datetime).timestamp() > long_press_threshold }}
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input "{{ button_key }}_long"

              - conditions:
                  - condition: template
                    value_template: "{{ time_since_last_press < double_press_window }}"
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input "{{ button_key }}_double"

              - conditions:
                  - condition: template
                    value_template: "{{ time_since_last_press >= double_press_window }}"
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input "{{ button_key }}_single"

          # Update last press timestamp
          - service: input_datetime.set_datetime
            data:
              entity_id: input_datetime.scene_control_last_press
              timestamp: "{{ now().timestamp() }}"

      # =============== DIAL CLOCKWISE ===============
      - conditions:
          - condition: template
            value_template: >
              {{ trigger_data.cluster_id == 8 and
                 trigger_data.command == 'step_with_on_off' and
                 trigger_data.params.step_mode == 0 }}
        sequence: !input dial_clockwise_action

      # =============== DIAL COUNTER-CLOCKWISE ===============
      - conditions:
          - condition: template
            value_template: >
              {{ trigger_data.cluster_id == 8 and
                 trigger_data.command == 'step' and
                 trigger_data.params.step_mode == 1 }}
        sequence: !input dial_counter_action
